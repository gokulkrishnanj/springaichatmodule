spring.application.name=springaichatmodel
server.port = 5000

#endpoints
api/v1 = /api/v1
getResponseAsString = /getResponseAsString
getResponseAsEntity = /getResponseAsEntity
getResponseAsGenerics = /getResponseAsGenerics
getContentsInMemory = /getContentsInMemory
generateImage = /generateImage
uploadMedia = /uploadMedia
health = /health
clearChatMemory = /clearChatMemory

#VectorStoreAPI
api/v1/ETL = /api/v1/ETL
extractDataFromString = /extractDataFromString
extractDataFromDoc = /extractDataFromDoc

spring.profiles.active= geminiai

#openai configurations
spring.ai.openai.chat.enabled = true
spring.ai.chat.client.enabled = false
spring.ai.ollama.chat.enabled=false
spring.ai.ollama.embedding.model = mxbai-embed-large
spring.ai.openai.embeddings.enabled=false

#stabilityai configurations
spring.ai.stabilityai.base-url = https://api.stability.ai/v1
spring.ai.stabilityai.image.option.n = 2
spring.ai.stabilityai.image.option.model = stable-diffusion-v1-6
spring.ai.stabilityai.api-key = ${STABILITYAI_KEY}

#logging
logging.level.or.springframework.ai= DEBUG

#cloudinary configurations
cloudinary.cloud-name = {CLOUD_NAME}
cloudinary.api-key = {CLOUD_API_KEY}
cloudinary.api-secret =  {SPI_SECRET_KEY}

#multipart file configurations
spring.servlet.multipart.max-file-size= 100MB

#Qdrant configuration
spring.ai.vectorstore.qdrant.host=localhost
spring.ai.vectorstore.qdrant.port=6334
spring.ai.vectorstore.qdrant.api-key= {API_KEY}
spring.ai.vectorstore.qdrant.collectionname=springAIChatBotEmbeddedVector
spring.ai.vectorstore.qdrant.use-tls=false
spring.ai.vectorstore.qdrant.initialize-schema=true
